#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <SDL/SDL.h>
#include <time.h>
#include <SDL/SDL_image.h>
#include <SDL/SDL_mixer.h>
#include <SDL/SDL_ttf.h>
#include "fonction.h"

void initialiser_intro(image *imge)
{
//chargemenet de l'image
(*imge).url="Intro.png";
(*imge).img=IMG_Load((*imge).url);
if ((*imge).img==NULL)
{ printf("unable to load background image %s\n",SDL_GetError());

   return ;}


(*imge).pos_img_ecran.x=0;
(*imge).pos_img_ecran.y=0;
(*imge).pos_img_affiche.x=0;
(*imge).pos_img_affiche.y=0;
(*imge).pos_img_affiche.h=SCREEN_H;
(*imge).pos_img_affiche.w=SCREEN_W;
}


int aleatoire_entre_1_et_3()
{
    int a;
    srand(time(NULL)); // initialisation du générateur de nombres aléatoires avec l'horloge du système
    a=(rand() % 3) + 1;
    return a; // retourne un nombre aléatoire entre 1 et 3
}



void init_enigme(enigme *e, char *nomfichier)
{
	int j,y;
	int i=1;
	char nomimage[20];


	e->p.x=0;
	e->p.y=0;
	e->img=NULL;

	e->num_enigme=aleatoire_entre_1_et_3();

	FILE *f=fopen("enigme.txt","r"); // ouvre le fichier enigme.txt
	if(f!=NULL)
	{

		while(fscanf(f,"%s %d\n",nomimage,&e->reponsevrai)!=EOF && i!=e->num_enigme) //stock le nom de limage qui contient lenigme dans une variable nomimage et la reponse vrai dans la variable reponsevrai
		{
			i++;                                                 // Remarque: yekef ki yekhou l'enigme li khtarna el nombre mteha aleatoirement
		}
		e->img=IMG_Load(nomimage);
		fclose(f);
	}
	else printf("ERROR !\n");


}




void afficherEnigme(enigme e, SDL_Surface * screen)
{
	SDL_BlitSurface(e.img,NULL,screen,&e.p);
}




/*int resolution (int *running,int *boucle )
{
        //Mix_Chunk *son;
	SDL_Event event ;
        int r=0 ;
	SDL_PollEvent(&event);
	//son= Mix_LoadWAV( "click_effect.wav" );
	switch(event.type)
	{
		case SDL_QUIT:
			*running= 0 ;
              		*boucle = 0;
			break ;

       	case SDL_KEYDOWN :
            		switch( event.key.keysym.sym )
                	{
				case  SDLK_a:
					//Mix_PlayChannel( -1, son, 0 );
			   		r= 1;
			   		*running= 1 ;
			   		break ;
			   	case  SDLK_z:
					//Mix_PlayChannel( -1, son, 0 );
			   		r= 2;
			   		*running= 1 ;
			   		break;
			   	case SDLK_e:
					//Mix_PlayChannel( -1, son, 0 );
			   		r=3 ;
			   		*running= 1 ;
			   		break;
			   	case SDLK_r:
					//Mix_PlayChannel( -1, son, 0 );
			   		r=4 ;
			   		*running= 1 ;
			   		break;

			}
       		break ;
	}
  	return r ;
}*/


 void afficher_resultat (SDL_Surface * screen,int s,int r,enigme *en)
 {

 	if (r==s)
 	{
 		en->img=IMG_Load("win.png");
 		SDL_BlitSurface(en->img, NULL, screen, &(en->p)) ;
        SDL_Flip(screen);
        SDL_FreeSurface(en->img);
 	}
 	else
 	{
 		en->img=IMG_Load("lose.png");
 		SDL_BlitSurface(en->img, NULL, screen, &(en->p)) ;
        SDL_Flip(screen);
        SDL_FreeSurface(en->img);
 	}
 }

void initexte(text *A)
{
    A->position.x=0;
    A->position.y=0;
    A->textColor.r=255;
    A->textColor.g=255;
    A->textColor.b=255;

    A->font = TTF_OpenFont( "police.ttf", 20 );
}


void AfficherText(text t,SDL_Surface *screen,char cc[30])
{
    t.surfaceTexte = TTF_RenderText_Solid(t.font, cc, t.textColor );
    SDL_BlitSurface(t.surfaceTexte, NULL, screen,&t.position);
}


void liberer_texte(texte txte)
{

  TTF_CloseFont(txte.police);// fermer la police
  TTF_Quit(); // arreter la SDL_ttf

}
